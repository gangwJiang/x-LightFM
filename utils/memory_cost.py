import numpy as np
from utils import md_solver
import torch
dims = [241,8,8,3697,4614,25,5481,329,31,381763,1611748,6793,6,5,2509,9,10,432,5,68,169,61]


# dims = [49,101,126,45,223,118,84,76, 95, 9,30,40,75,1458,555,193949,138801,306,19,11970,
#         634,4,42646,5178,192773,3175,27,11422,181075,11,4654,2032,5,189657,18,16,59697,86,45571]

byte = 4
cost = np.sum(dims)*128*byte/1024/1024
print("full emb:", cost)
# full emb
cost = np.sum(dims)*32*byte/1024/1024
print("full emb:", cost)

# discrete emb
cost = np.sum(dims)*1*32/1024/8/1024
print("discrete emb:", cost)
# compositional emb
cost = 0
for i in range(len(dims)):
    if dims[i]<200:
        cost += dims[i]
    cost += dims[i]/8 + 8
cost = cost*32*byte/1024/1024
print("qr emb:", cost)

cost = 0
for i in range(len(dims)):
    if dims[i]<150:
        continue
        # cost += dims[i]
    cost += 2*dims[i]**(1/2)
cost = cost*32*byte/1024/1024
print("compositional emb:", cost)

# mix dimension emb
dim_importance = md_solver(torch.Tensor(np.array(dims).astype(np.float32)), 0.2, d0=32, round_dim=False)
cost = 0
print(dim_importance)
for i in range(len(dims)):
    if dims[i]<200:
        cost += dims[i]*32
    cost += dim_importance[i]*dims[i] +dim_importance[i]*32
cost = cost*byte/1024/1024

print("mix dimension emb:", cost)
# deep hash emb
cost = 0
for i in range(len(dims)):
    if dims[i]<200:
        cost += dims[i]*32
    cost += 256*256*4+256*32
cost = cost*byte/1024/1024

print("deep hash emb:", cost)
# xlight emb
cost1 = 0
cost2 = 0
cost3 =0
from math import log
K = 1024
for i in range(len(dims)):
    if dims[i]<500:
        cost1 += dims[i]*32*byte
        continue
    cost2 += K*32*byte
    cost3 += dims[i]*log(K,2)*4/8
cost = (cost1+cost2+cost3)/1024/1024



print("light emb:", cost, cost1/1024/1024, cost2/1024/1024,cost3/1024/1024)

cost1 = 0
cost2 = 0
cost3 = 0
# select = [64,1,1,256,256,1,256,64,1,2048,2048,256,1,1,256,1,1,64,1,1,64,1]
select = [(241, 64), (8, 1), (8, 1), (3697, 256), (4614, 512), (25, 1), (5481, 512), (329, 128), (31, 1), (381763, 2048), (1611748, 256), (6793, 1024), (6, 1), (5, 1), (2509, 256), (9, 1), (10, 1), (432, 128), (5, 1), (68, 1), (169, 64), (61, 1)] #best avazu
# select =[(241, 1), (8, 1), (8, 1), (3697, 1024), (4614, 2048), (25, 1), (5481, 2048), (329, 256), (31, 1), (381763, 2048), (1611748, 2048), (6793, 2048), (6, 1), (5, 1), (2509, 2048), (9, 1), (10, 1), (432, 1), (5, 1), (68, 1), (169, 1), (61, 1)]
select = [[241, 64], [8, 1], [8, 1], [3697, 512], [4614, 1024], [25, 1], [5481, 128], [329, 64], [31, 1], [381763, 512], [1611748, 256], [6793, 512], [6, 1], [5, 1], [2509, 128], [9, 1], [10, 1], [432, 128], [5, 1], [68, 1], [169, 64], [61, 1]]
# select = [(241, 64), (8, 1), (8, 1), (3697, 64), (4614, 64), (25, 1), (5481, 256), (329, 64), (31, 1), (381763, 2048), (1611748, 512), (6793, 256), (6, 1), (5, 1), (2509, 64), (9, 1), (10, 1), (432, 64), (5, 1), (68, 1), (169, 64), (61, 1)]
# select = [(49, 1), (101, 1), (126, 1), (45, 1), (223, 64), (118, 1), (84, 1), (76, 1), (95, 1), (9, 1), (30, 1), (40, 1), (75, 1), (1458, 128), (555, 128), (193949, 2048), (138801, 1024), (306, 64), (19, 1), (11970, 1024), (634, 128), (4, 1), (42646, 2048),
#  (5178, 2048), (192773, 1024), (3175, 1024), (27, 1), (11422, 1024), (181075, 2048), (11, 1), (4654, 1024), (2032, 512), (5, 1), (189657, 2048), (18, 1), (16, 1), (59697, 1024), (86, 1), (45571, 2048)]
# select = [(49, 1), (101, 1), (126, 1), (45, 1), (223, 64), (118, 1), (84, 1), (76, 1), (95, 1), (9, 1), (30, 1), (40, 1), (75, 1), (1458, 512), (555, 128), (193949, 2048), (138801, 2048), (306, 64), (19, 1), (11970, 2048), (634, 128), (4, 1), (42646, 2048), (5178, 2048), (192773, 2048), (3175, 1024), (27, 1), (11422, 2048), (181075, 2048), (11, 1), (4654, 1024), (2032, 512), (5, 1), (189657, 2048), (18, 1), (16, 1), (59697, 2048), (86, 1), (45571, 2048)]
# # select =[(49, 1), (101, 1), (126, 1), (45, 1), (223, 64), (118, 1), (84, 1), (76, 1), (95, 1), (9, 1), (30, 1), (40, 1), (75, 1), (1458, 512), (555, 128), (193949, 1024), (138801, 1024), (306, 64), (19, 1), (11970, 2048), (634, 128), (4, 1), (42646, 2048),(5178, 2048), (192773, 2048), (3175, 1024), (27, 1), (11422, 2048), (181075, 1024), (11, 1), (4654, 1024), (2032, 512), (5, 1), (189657, 1024), (18, 1), (16, 1), (59697, 1024), (86, 1), (45571, 2048)]
# select =[(49, 1), (101, 1), (126, 1), (45, 1), (223, 64), (118, 1), (84, 1), (76, 1), (95, 1), (9, 1), (30, 1), (40, 1), (75, 1), (1458, 256), (555, 64), (193949, 1024), (138801, 2048), (306, 64), 
# (19, 1), (11970, 1024), (634, 64), (4, 1), (42646, 2048), (5178, 1024), (192773, 1024), (3175, 1024), (27, 1), (11422, 1024), (181075, 2048), (11, 1), (4654, 512), (2032, 512), (5, 1), (189657, 1024), (18, 1), (16, 1), (59697, 1024), (86, 1), (45571, 1024)]
for i in range(len(dims)):
    if select[i][1]==1:
        cost1 += dims[i]*32*byte
        continue
    cost2 += select[i][1]*32*byte
    cost3 += dims[i]*log(select[i][1],2)*4/8
cost = (cost3+cost1+cost2)/1024/1024


print("xlight emb:", cost, cost1/1024/1024, cost2/1024/1024,cost3/1024/1024)

cost = 0
arch = "0 :  241 5 64 3. 3 :  3697 20 512 2. 4 :  4614 20 512 3. 6 :  5481 24 1024 2. 7 :  329 9 128 2. 9 :  381763 24 2048 3. 10 :  1611748 24 1024 2. 11 :  6793 24 512 3. 14 :  2509 16 256 3. 17 :  432 9 128 2. 20 :  169 5 64 2"
arch = arch.split(".")
print(arch)
cnt = 0
for i in range(len(dims)):
    if cnt>=len(arch):
        cost += dims[i]*32*byte
    elif i != int(arch[cnt].split()[0]):
        cost += dims[i]*32*byte
    else:
        p = arch[cnt].split()
        cost += int(p[4])*32*byte
        cost += dims[i]*log(int(p[4]),2)*int(p[5])/8
        cnt += 1


print("xxlight emb:", cost/1024/1024)

cost = 0
arch = "0 :  241 4 1 1.3 :  3697 15 1024 4.4 :  4614 15 512 4.6 :  5481 18 1024 4.7 :  329 7 128 1.9 :  381763 18 512 4.10 :  1611748 18 512 4.11 :  6793 18 2048 4.14 :  2509 12 512 4.17 :  432 7 128 4.20 :  169 4 1 1"
arch = arch.split(".")
print(arch)
cnt = 0
for i in range(len(dims)):
    if cnt>=len(arch):
        cost += dims[i]*32*byte
    elif i != int(arch[cnt].split()[0]):
        cost += dims[i]*32*byte
    else:
        p = arch[cnt].split()
        cost += int(p[4])*32*byte
        cost += dims[i]*log(int(p[4]),2)*int(p[5])/8
        cnt += 1

print("xxxlight emb:", cost/1024/1024)

arch =[[241, 1], [8, 1], [8, 1], [3697, 128, 4, 2, 4, 4, 4, 4, 2, 2, 4, 4, 1, 1, 4, 2, 4, 4, 4, 1, 4, 2], [4614, 1024, 4, 4, 4, 4, 4, 4, 2, 4, 4, 2, 4, 2, 4, 4, 2, 4, 4, 2, 4, 2], [25, 1], [5481, 1024, 4, 4, 1, 4, 1, 2, 2, 4, 4, 4, 4, 4, 1, 4, 1, 4, 2, 4, 2, 4], [329, 128, 4, 2, 2, 1, 2, 2, 4, 4, 1, 2, 2, 2, 2, 4, 2, 2, 1, 2, 4, 1], [31, 1], [381763, 1024, 4, 1, 2, 2, 1, 1, 2, 2, 4, 2, 2, 1, 4, 2, 4, 2, 2, 1, 2, 2], [1611748, 2048, 4, 4, 1, 2, 2, 2, 2, 2, 2, 2, 4, 2, 4, 2, 2, 2, 4, 2, 4, 2], [6793, 2048, 1, 1, 4, 1, 4, 4, 4, 4, 2, 1, 1, 4, 1, 4, 4, 4, 4, 2, 2, 2], [6, 1], [5, 1], [2509, 512, 4, 2, 2, 2, 4, 4, 4, 1, 4, 1, 2, 2, 1, 2, 1, 2, 4, 2, 4, 1], [9, 1], [10, 1], [432, 1], [5, 1], [68, 1], [169, 1], [61, 1]]
cost= 0
for i in range(len(dims)):
    if arch[i][1] == 1:
        cost += dims[i]*32*4 
    else:
        cost += arch[i][1]*4*32* 3
        avg = 0
        for j in arch[i][2:]:
            avg += j
        
        cost += dims[i]*np.log2(arch[i][1])*avg/8/len(arch[i][2:])
print(cost/1024/1024)